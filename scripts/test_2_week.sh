#!/usr/bin/env bash
# Quantitative trading soak test (paper) harness.
# Default: quick 5-minute soak (1 day x 300s). Use --full for 14 days x 24h.
#
# This script:
#  - Creates needed directories under runs/soak
#  - Sets up a user-space logrotate config (no sudo) and runs it daily if available
#  - Starts your paper session command each day (tmux optional)
#  - Monitors and gracefully stops at end-of-day
#  - Generates a daily markdown/json report with tools/soak_report.py
#
# Minimal usage (5-minute quick run):
#   ./scripts/test_2_week.sh
#
# Full 2-week soak:
#   ./scripts/test_2_week.sh --full
#
# Optional flags:
#   --run-cmd "CMD"          set your paper-run command inline
#   --days N                 number of days (default 1)
#   --day-seconds S          seconds per day (default 300)
#   --use-tmux 0|1           run child in tmux (default 1)
#   --runs-dir PATH          override runs/ directory (default: <repo>/runs)
#   --no-artifacts-tar       skip tarring app artifacts to save IO
#   -h|--help                show help
#
# Example RUN_CMD:
#   export RUN_CMD="python -m logos.cli run --mode paper --config configs/paper.yaml"

set -euo pipefail

# -------- Defaults (overridable via env or flags) --------
ROOT_DIR="${ROOT_DIR:-$(pwd)}"
RUNS_DIR="${RUNS_DIR:-$ROOT_DIR/runs}"
SOAK_DIR="${SOAK_DIR:-$RUNS_DIR/soak}"
REPORTS_DIR="${REPORTS_DIR:-$SOAK_DIR/reports}"
LOG_DIR="${LOG_DIR:-$SOAK_DIR/logs}"
PYTHON_BIN="${PYTHON_BIN:-$ROOT_DIR/.venv/bin/python}"

# Quick-run defaults (5 minutes) unless --full or flags override:
SOAK_DAYS="${SOAK_DAYS:-1}"
DAY_RUNTIME_SEC="${DAY_RUNTIME_SEC:-300}"

USE_TMUX="${USE_TMUX:-1}"
NO_ARTIFACTS_TAR="${NO_ARTIFACTS_TAR:-0}"

# Sensible default RUN_CMD (can be overridden by env or --run-cmd)
RUN_CMD="${RUN_CMD:-python -m logos.cli run --mode paper --config configs/paper.yaml}"

# --------------- Helpers ---------------
ts() { date -u +"%Y-%m-%dT%H:%M:%SZ"; }

usage() {
  sed -n '1,80p' "$0" | sed 's/^# \{0,1\}//'
}

info() { echo "$(ts) [soak] $*"; }
warn() { echo "$(ts) [soak][WARN] $*" >&2; }
die() { echo "$(ts) [soak][ERROR] $*" >&2; exit 2; }

require_python() {
  if [[ ! -x "$PYTHON_BIN" && "$PYTHON_BIN" != "python3" ]]; then
    warn "PYTHON_BIN '$PYTHON_BIN' not found/executable. Falling back to 'python3'."
    PYTHON_BIN="python3"
  fi
  "$PYTHON_BIN" - <<'PY' >/dev/null 2>&1 || die "Python is not runnable"
print("ok")
PY
}

ensure_dirs() {
  mkdir -p "$RUNS_DIR" "$SOAK_DIR" "$REPORTS_DIR" "$LOG_DIR"
}

# User-space logrotate: writes config into $SOAK_DIR/logrotate.d and runs logrotate (if present)
setup_user_logrotate() {
  local lr_root="$SOAK_DIR/logrotate"
  local lr_dir="$lr_root.d"
  local lr_conf="$lr_root.conf"
  local lr_state="$lr_root.status"
  mkdir -p "$lr_dir"

  local lr_file="$lr_dir/logos-soak"
  if [[ ! -f "$lr_file" ]]; then
    cat > "$lr_file" <<EOF
$LOG_DIR/*.log {
  weekly
  rotate 8
  missingok
  notifempty
  compress
  delaycompress
  copytruncate
}
EOF
    info "Created user logrotate stanza: $lr_file"
  fi

  if [[ ! -f "$lr_conf" ]]; then
    cat > "$lr_conf" <<EOF
# User-space logrotate config generated by test_2_week.sh
include $lr_dir
EOF
    info "Created user logrotate config: $lr_conf"
  fi

  # Export for later use
  export _LR_CONF="$lr_conf"
  export _LR_STATE="$lr_state"
}

run_user_logrotate() {
  if command -v logrotate >/dev/null 2>&1; then
    logrotate -s "${_LR_STATE:-$SOAK_DIR/logrotate.status}" "${_LR_CONF:-$SOAK_DIR/logrotate.conf}" || warn "logrotate returned non-zero"
  else
    warn "logrotate not installed; skipping rotation (logs split by day already)"
  fi
}

start_session_tmux() {
  local log_file="$1"
  local session="soak_$(date -u +%s)"
  if ! command -v tmux >/dev/null 2>&1; then
    warn "tmux not installed; falling back to forked process"
    echo ""
    return 1
  fi
  tmux new-session -d -s "$session" -c "$ROOT_DIR" "bash -lc '$RUN_CMD >> \"$log_file\" 2>&1'"
  echo "$session"
}

start_session_fork() {
  local log_file="$1"
  ( cd "$ROOT_DIR" && bash -lc "$RUN_CMD" ) >> "$log_file" 2>&1 &
  echo $!
}

stop_session_tmux() {
  local session="$1"
  tmux send-keys -t "$session" C-c || true
  sleep 3
  tmux kill-session -t "$session" || true
}

stop_pid() {
  local pid="$1"
  kill -TERM "$pid" 2>/dev/null || true
  sleep 5
  kill -KILL "$pid" 2>/dev/null || true
}

collect_report() {
  local day_iso="$1" log_file="$2" day_dir="$3" restarts_file="$4"
  local out_dir="$REPORTS_DIR/$day_iso"
  mkdir -p "$out_dir"
  cp -f "$log_file" "$out_dir/orchestrator.log" || true

  # Optional: gather app artifacts modified during this day
  if [[ "$NO_ARTIFACTS_TAR" != "1" ]]; then
    local tarlist="$day_dir/_tarlist.txt"
    find "$RUNS_DIR" -type f -newermt "${day_iso} 00:00:00" ! -newermt "${day_iso} 23:59:59" > "$tarlist" || true
    if [[ -s "$tarlist" ]]; then
      tar -czf "$out_dir/app_artifacts.tgz" -T "$tarlist" || warn "failed to create app_artifacts.tgz"
    fi
  fi

  # Generate daily report
  if [[ -x "$PYTHON_BIN" ]]; then
    "$PYTHON_BIN" tools/soak_report.py \
      --runs-dir "$RUNS_DIR" \
      --day "$day_iso" \
      --orchestrator-log "$log_file" \
      --restarts-log "$restarts_file" \
      --out-dir "$out_dir" || warn "soak_report.py failed"
  else
    warn "Python not available to generate daily report"
  fi
}

# --------------- Arg parsing ---------------
RUN_CMD_FLAG=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    --full)
      SOAK_DAYS=14
      DAY_RUNTIME_SEC=86400
      shift
      ;;
    --days)
      SOAK_DAYS="${2:?}"; shift 2;;
    --day-seconds)
      DAY_RUNTIME_SEC="${2:?}"; shift 2;;
    --use-tmux)
      USE_TMUX="${2:?}"; shift 2;;
    --runs-dir)
      RUNS_DIR="${2:?}"; SOAK_DIR="$RUNS_DIR/soak"; REPORTS_DIR="$SOAK_DIR/reports"; LOG_DIR="$SOAK_DIR/logs"; shift 2;;
    --run-cmd)
      RUN_CMD="${2:?}"; RUN_CMD_FLAG="1"; shift 2;;
    --no-artifacts-tar)
      NO_ARTIFACTS_TAR=1; shift;;
    -h|--help)
      usage; exit 0;;
    *)
      die "Unknown argument: $1 (use --help)";;
  esac
done

# --------------- Main flow ---------------
main() {
  ensure_dirs
  require_python
  setup_user_logrotate

  # Effective config banner
  info "CONFIG:"
  echo "  ROOT_DIR         = $ROOT_DIR"
  echo "  RUNS_DIR         = $RUNS_DIR"
  echo "  SOAK_DIR         = $SOAK_DIR"
  echo "  REPORTS_DIR      = $REPORTS_DIR"
  echo "  LOG_DIR          = $LOG_DIR"
  echo "  PYTHON_BIN       = $PYTHON_BIN"
  echo "  SOAK_DAYS        = $SOAK_DAYS"
  echo "  DAY_RUNTIME_SEC  = $DAY_RUNTIME_SEC"
  echo "  USE_TMUX         = $USE_TMUX"
  echo "  NO_ARTIFACTS_TAR = $NO_ARTIFACTS_TAR"
  echo "  RUN_CMD          = $RUN_CMD"

  # Sanity: ensure tools/soak_report.py exists
  if [[ ! -f "$ROOT_DIR/tools/soak_report.py" ]]; then
    warn "tools/soak_report.py not found. Daily report will be limited."
  fi

  for (( d=1; d<=SOAK_DAYS; d++ )); do
    local day_iso
    day_iso="$(date -u +%F)"
    local day_dir="$SOAK_DIR/$day_iso"
    mkdir -p "$day_dir"
    local log_file="$LOG_DIR/${day_iso}.log"
    local restarts_file="$day_dir/restarts.log"
    : > "$log_file"
    : > "$restarts_file"

    info "DAY $d/$SOAK_DAYS started â€” $day_iso"
    local end_epoch=$(( $(date +%s) + DAY_RUNTIME_SEC ))

    # Start session
    local tmux_session=""
    local child_pid=""
    if [[ "$USE_TMUX" == "1" ]]; then
      tmux_session="$(start_session_tmux "$log_file" || echo "")"
      if [[ -z "$tmux_session" ]]; then
        USE_TMUX=0
      fi
    fi
    if [[ "$USE_TMUX" == "0" ]]; then
      child_pid="$(start_session_fork "$log_file")"
    fi

    # Simple monitor loop (only in fork mode we can restart automatically)
    if [[ "$USE_TMUX" == "0" && -n "$child_pid" ]]; then
      while [[ "$(date +%s)" -lt "$end_epoch" ]]; do
        if ! kill -0 "$child_pid" 2>/dev/null; then
          info "Child exited unexpectedly. Restarting..."
          echo "$(ts) restart" >> "$restarts_file"
          child_pid="$(start_session_fork "$log_file")"
        fi
        sleep 5
      done
    else
      # tmux mode: we just wait until end-of-day
      while [[ "$(date +%s)" -lt "$end_epoch" ]]; do sleep 5; done
    fi

    # Stop gracefully
    if [[ "$USE_TMUX" == "1" && -n "$tmux_session" ]]; then
      stop_session_tmux "$tmux_session"
    elif [[ -n "$child_pid" ]]; then
      stop_pid "$child_pid"
    fi

    # Report + rotate logs
    collect_report "$day_iso" "$log_file" "$day_dir" "$restarts_file"
    run_user_logrotate

    info "DAY $d/$SOAK_DAYS complete. Report: $REPORTS_DIR/$day_iso"
    # Wait for the date to roll over to avoid overlapping time windows (except on last day)
    if [[ $d -lt $SOAK_DAYS ]]; then
      while [[ "$(date -u +%F)" == "$day_iso" ]]; do sleep 5; done
    fi
  done

  info "Completed $SOAK_DAYS-day soak."
}

main "$@"