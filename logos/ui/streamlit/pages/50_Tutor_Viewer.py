"""
Tutor Viewer page for browsing lesson transcripts.

Displays lesson materials from runs/lessons if available.
"""
from __future__ import annotations

from pathlib import Path

import streamlit as st

from logos import paths

st.set_page_config(page_title="Tutor Viewer", page_icon="üìö", layout="wide")

st.title("üìö Tutor Viewer")

st.markdown("""
Browse interactive lesson transcripts and learning materials generated by Tutor Mode.

Lessons are stored in `runs/lessons/` after running:
```bash
python -m logos.tutor --lesson <lesson_name> --plot
```
""")

# Check if lessons directory exists
lessons_dir = paths.RUNS_LESSONS_DIR

if not lessons_dir.exists():
    st.info("No lessons directory found. Run a tutor lesson to create learning materials.")
    st.code("python -m logos.tutor --lesson mean_reversion --plot")
    st.stop()

# List lesson directories
lesson_dirs = [d for d in lessons_dir.iterdir() if d.is_dir()]

if not lesson_dirs:
    st.info("No lessons found. Run a tutor lesson to see materials here.")
    st.code("python -m logos.tutor --list  # See available lessons")
    st.stop()

st.markdown(f"**Found {len(lesson_dirs)} lesson runs**")

# Lesson selector
lesson_names = [d.name for d in sorted(lesson_dirs, reverse=True)]
selected_lesson = st.selectbox("Select Lesson", lesson_names)

if selected_lesson:
    lesson_path = lessons_dir / selected_lesson
    
    st.divider()
    
    st.markdown(f"**Lesson:** `{selected_lesson}`")
    
    # Look for transcript files
    transcript_files = []
    for ext in [".md", ".txt"]:
        transcript_files.extend(lesson_path.glob(f"*transcript*{ext}"))
        transcript_files.extend(lesson_path.glob(f"*lesson*{ext}"))
    
    if transcript_files:
        st.subheader("üìù Transcript")
        
        # If multiple transcripts, let user choose
        if len(transcript_files) > 1:
            transcript_names = [f.name for f in transcript_files]
            selected_transcript = st.selectbox("Transcript File", transcript_names)
            transcript_file = lesson_path / selected_transcript
        else:
            transcript_file = transcript_files[0]
        
        try:
            with open(transcript_file, "r") as f:
                transcript_content = f.read()
            
            if transcript_file.suffix == ".md":
                st.markdown(transcript_content)
            else:
                st.text(transcript_content)
        
        except IOError as e:
            st.error(f"Failed to read transcript: {e}")
    else:
        st.info("No transcript file found in this lesson directory")
    
    st.divider()
    
    # Look for plots/images
    st.subheader("üìä Plots")
    
    image_files = []
    for ext in [".png", ".jpg", ".jpeg", ".svg"]:
        image_files.extend(lesson_path.glob(f"*{ext}"))
    
    if image_files:
        # Display images
        for img_file in sorted(image_files):
            st.markdown(f"**{img_file.name}**")
            try:
                st.image(str(img_file), use_container_width=True)
            except Exception as e:
                st.error(f"Failed to load image {img_file.name}: {e}")
    else:
        st.info("No plots found. Use --plot flag when running tutor lessons to generate visualizations.")
    
    st.divider()
    
    # List all files in lesson directory
    with st.expander("üìÅ All Files"):
        all_files = sorted(lesson_path.glob("*"))
        if all_files:
            file_data = []
            for f in all_files:
                if f.is_file():
                    size = f.stat().st_size
                    file_data.append({
                        "File": f.name,
                        "Type": f.suffix or "no extension",
                        "Size": f"{size:,} bytes",
                    })
            
            if file_data:
                st.dataframe(file_data, use_container_width=True, hide_index=True)
        else:
            st.info("No files found in lesson directory")

st.divider()

# Available lessons reference
with st.expander("üìö Available Lessons"):
    st.markdown("""
    ### Built-in Lessons
    
    Run these commands to generate lesson materials:
    
    **Mean Reversion**
    ```bash
    python -m logos.tutor --lesson mean_reversion --plot --explain-math
    ```
    
    **Momentum**
    ```bash
    python -m logos.tutor --lesson momentum --plot --explain-math
    ```
    
    **Pairs Trading**
    ```bash
    python -m logos.tutor --lesson pairs_trading --plot --explain-math
    ```
    
    Each lesson includes:
    - Strategy explanation and rationale
    - Signal generation logic
    - Risk management considerations
    - Mathematical derivations (with --explain-math)
    - Visual examples (with --plot)
    - Glossary of terms
    """)
